import os
from azure.core.credentials import AzureKeyCredential
from azure.search.documents.indexes.models import *
from azure.search.documents import SearchClient
from azure.search.documents.models import QueryType

import streamlit as st

from openai import AzureOpenAI

client = AzureOpenAI(
  azure_endpoint = st.secrets["endpoint"], 
  api_key=st.secrets["key"],  
  api_version="2023-05-15"
)

def create_prompt(context,query):
    header = "What is Diploblastic and Triploblastic Organisation"
    return context + "\n\n" + query + "\n"


def generate_answer(conversation):
    response = client.chat.completions.create(
    model=st.secrets["deployment_id_gpt4"],
    messages=conversation,
    temperature=0,
    max_tokens=1000,
    top_p=1,
    frequency_penalty=0,
    presence_penalty=0,
    stop = [' END']
    )
    return (response.choices[0].message.content).strip()

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

st.header('ðŸ“„ Haycarb Annual Report AI ðŸ¤– Analyser ðŸ”Ž')
disclaimer_text = "**Disclaimer:** These responses are generated by an AI model and may not always be accurate. If you notice any errors or have any concerns, please feel free to discuss them in the group so we can improve. Also, note that this is a testing environment."
st.warning(disclaimer_text)
st.markdown('Developed by :blue[H One Pvt Ltd] :heart:')
# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
prompt = st.chat_input("How many board members are there?")
if prompt:
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.spinner('Processing...'):
        service_name = st.secrets["service_name"]
        key = st.secrets["searchkey"]

        endpoint = "https://{}.search.windows.net/".format(service_name)
        index_name = st.secrets["index"]

        azure_credential =  AzureKeyCredential(key)

        search_client = SearchClient(endpoint=endpoint,
                                            index_name=index_name,
                                            credential=azure_credential)


        KB_FIELDS_CONTENT = os.environ.get("KB_FIELDS_CONTENT") or "content"
        KB_FIELDS_CATEGORY = os.environ.get("KB_FIELDS_CATEGORY") or st.secrets["category"]
        KB_FIELDS_SOURCEPAGE = os.environ.get("KB_FIELDS_SOURCEPAGE") or "sourcepage"

        exclude_category = None

        print("Searching:", prompt)
        print("-------------------")
        filter = "category ne '{}'".format(exclude_category.replace("'", "''")) if exclude_category else None
        r = search_client.search(prompt, 
                                filter=filter,
                                query_type=QueryType.SEMANTIC, 
                                # query_language="en-us", 
                                # query_speller="lexicon", 
                                semantic_configuration_name="default", 
                                top=5)
        results = []
        for doc in r:
            print(doc)  # Print the doc to inspect its structure
            try:
                source_page = doc[KB_FIELDS_SOURCEPAGE]
                content = doc[KB_FIELDS_CONTENT].replace("\n", "").replace("\r", "")
                results.append(f"{source_page}: {content}")
            except KeyError as e:
                print(f"KeyError: {e} not found in the document.")

        content = "\n".join(results)

        references =[]
        for result in results:
            references.append(result.split(":")[0])
        st.markdown("### References:")
        st.write(" , ".join(set(references)))

        system_message = """You specialized in breaking down complex financial information into easy-to-understand insights. 
        
                        You are dealing with customers of Haycarb PLC. Here's how you'll handle questions about Haycarb's annual report:

                        Recognition of Greetings: When the user inputs a greeting like 'Hi' or 'Hello,' you detect this pattern. 
                        Once recognized, you respond with a welcome message, introducing yourself as 'Haycarb Annual Report AI Analyser.'
                        
                        Handling Non-Relevant Questions: If the user asks a question unrelated to Haycarb, 
                        you identify it as such. Then you respond politely, indicating that it's unable to answer non-relevant 
                        questions and prompt the user to ask something related to Haycarb.

                        Responding to Relevant Queries: When the user asks a relevant question about Haycarb, 
                        you process the query. Then you retrieve the necessary information from the knowledge base 
                        (such as the annual reports or policy details) and present it in an easy-to-understand format.
                        
                        Integrating Polite Responses: Throughout the conversation, you maintain a polite tone in your responses, 
                        ensuring a positive user experience. Polite responses can include phrases like 'Sorry,' 'Please,' and 'Thank you,' 
                        used appropriately based on the context of the conversation.
                        
                        Continual Improvement: Continuously monitor user interactions and feedback to refine your responses 
                        and improve its effectiveness. Implement updates and enhancements to your functionality as needed 
                        to better serve users' needs.
                        
                        Review and Analysis: You'll carefully examine Haycarbs's financial statements, like 
                        their balance sheets and income statements, to spot any trends or areas needing attention.
                        
                        Insightful Summaries: After analyzing the data, you'll summarize the most important points from 
                        Haycarb's annual reports, focusing on practical suggestions for better decision-making.
                        
                        Clear Data Interpretation: Using advanced techniques, you'll dive deep into the numbers to uncover 
                        hidden insights and provide a clear picture of Haycarb's financial health.
                        
                        Key Highlights: You'll highlight the critical financial information from Haycarb's 
                        reports, using simple terms that are easy for everyone to grasp.
                        
                        Investment Guidance: If you're looking to invest, you'll provide a concise analysis tailored to 
                        Haycarb, offering key points to help make informed decisions.
                        
                        Balanced Assessment: Finally, you'll give a fair evaluation of Haycarbs's performance, 
                        pointing out both strengths and areas where they could improve, with detailed explanations.
                        
                        Let's dive into any questions the user has about Haycarb, making sure to keep things
                        clear and relevant to your financial needs."""


        conversation = [{"role": "system",
                        "content": system_message}]
        prompt = create_prompt(content,prompt)
        conversation.append({"role": "assistant", "content": prompt})
        conversation.append({"role": "user", "content": prompt})
        reply = generate_answer(conversation)

        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            st.markdown(reply)

        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": reply})
